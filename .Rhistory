tmp2 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==3)}
else if (angle=="bcc"){
tmp1 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==3)}
else if (angle=="cca"){
tmp1 = subset(data, type==zone & d.g==main & V24=="cca" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="cca" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="cca" & V25==3)}
else if (angle=="caa"){
tmp1 = subset(data, type==zone & d.g==main & V24=="caa" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="caa" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="caa" & V25==3)}
# print(nrow(tmp1));print(nrow(tmp2));print(nrow(tmp3))
radar.tmp1 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp1)=c(seq(90,350,10),seq(0,80,10))
radar.tmp2 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp2)=c(seq(90,350,10),seq(0,80,10))
if (nrow(tmp3) != 0) {radar.tmp3 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp3)=c(seq(90,350,10),seq(0,80,10))}
#print("Test 0")
if (angle=="aab" | angle=="caa"){
for (i in tmp1[,19]) { radar.tmp1[1,round(i/10-9)%%36+1] = radar.tmp1[1,round(i/10-9)%%36+1]+1 } # 19 = tc
for (i in tmp2[,19]) { radar.tmp2[1,round(i/10-9)%%36+1] = radar.tmp2[1,round(i/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in tmp3[,19]) { radar.tmp3[1,round(i/10-9)%%36+1] = radar.tmp3[1,round(i/10-9)%%36+1]+1 }}
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, radar.tmp3, c(30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, rep(0,36), c(30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))}}
else if (angle=="abb" | angle == "bbc"){#print("Test 1")
for (i in 1:nrow(tmp1)) { radar.tmp1[1,round((tmp1[i,19]-tmp1[i,12]+120)/10-9)%%36+1] = radar.tmp1[1,round((tmp1[i,19]-tmp1[i,12]+120)/10-9)%%36+1]+1 }
for (i in 1:nrow(tmp2)) { radar.tmp2[1,round((tmp2[i,19]-tmp2[i,12]+120)/10-9)%%36+1] = radar.tmp2[1,round((tmp2[i,19]-tmp2[i,12]+120)/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in 1:nrow(tmp3)) { radar.tmp3[1,round((tmp3[i,19]-tmp3[i,12]+120)/10-9)%%36+1] = radar.tmp3[1,round((tmp3[i,19]-tmp3[i,12]+120)/10-9)%%36+1]+1 }}
#print("Test 2")
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2 , radar.tmp3, c(0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0)) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2 , rep(0,36), c(0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0))}}
else if (angle=="bcc" | angle=="cca"){#print("Test 1")
for (i in 1:nrow(tmp1)) { radar.tmp1[1,round((tmp1[i,19]-tmp1[i,13]+240)/10-9)%%36+1] = radar.tmp1[1,round((tmp1[i,19]-tmp1[i,13]+240)/10-9)%%36+1]+1 }
for (i in 1:nrow(tmp2)) { radar.tmp2[1,round((tmp2[i,19]-tmp2[i,13]+240)/10-9)%%36+1] = radar.tmp2[1,round((tmp2[i,19]-tmp2[i,13]+240)/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in 1:nrow(tmp3)) { radar.tmp3[1,round((tmp3[i,19]-tmp3[i,13]+240)/10-9)%%36+1] = radar.tmp3[1,round((tmp3[i,19]-tmp3[i,13]+240)/10-9)%%36+1]+1 }}
#print("Test 2")
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, radar.tmp3, c(rep(0,6),30,rep(0,17),30,rep(0,11))) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, rep(0,36), c(rep(0,6),30,rep(0,17),30,rep(0,11)))}}
colnames(radar.tmp)=c(90,"","",120,"","",150,"","",180,"","",210,"","",240,"","",270,"","",300,"","",330,"","",0,"","",30,"","",60,"","")
radarchart( radar.tmp  , axistype=1 ,
pcol=c(rgb(1,0,0,0.9),rgb(0,0,1,0.9),rgb(0,1,0,0.9),rgb(0,0,0)) , pfcol=c(rgb(1,0,0,0.7), rgb(0,0,1,0.5),rgb(0,1,0,0.3),rgb(0,0,0)) , #custom polygon
cglcol="grey", cglty=1, axislabcol="grey", seg=6, caxislabels=seq(0,30,5), cglwd=0.8,calcex = 0.8, pty = 32, plty=1, plwd=c(1,1,1,3), #custom the grid
vlcex=0.8 , centerzero=TRUE, #custom labels
title = "" )
return(round(radar.tmp[3:(nrow(radar.tmp)-1),],1))
}
img <- readPNG(paste(getwd(), "/delta-sep.png", sep=""))
layout(matrix(c(1,4,1,2,4,5,2,8,5,3,8,6,3,7,6,1,7,1),nrow=3))
par(oma=c(0,0,0,0)+0.1,mar=c(0,0,0,0)+0.1)
plot.new()
dprod.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dprod.angle = rbind(dprod.angle, radar3.angle(data, "delta propre", "droit", i, ""))}
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data[i,"angledif.bc"] < 0) {
data[i,"angledif.bc"] = data[i,"angledif.bc"] + 360
}
if (data[i,"theta"] < 0){
data[i,"theta"] = data[i,"theta"] + 360
}
}
data = read.csv( paste(getwd(), "/data_all.csv",sep="" )) ## 48434 obs, 16 var
library(ggplot2)
library(dplyr) # mutate
library(mosaic) # rad2deg
library(spatstat) # ppp, Kest
library(gridExtra) # tableGrob
library(fmsb) # radar chart
library(png)
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data[i,"angledif.bc"] < 0) {
data[i,"angledif.bc"] = data[i,"angledif.bc"] + 360
}
if (data[i,"theta"] < 0){
data[i,"theta"] = data[i,"theta"] + 360
}
}
for (i in 1:nrow(data)) {
if (data[i,"delta"] == "delta"){
if      (data[i,"angle.a"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.ab"]) {data[i,24] = "aab"
if(-4 <= data[i,"xc"])                            {data[i,25] = 1} #17 = xc ; 18 = yc
else if(-8 <= data[i,"xc"] & data[i,"xc"] < -4)  {data[i,25] = 2}
else if(data[i,"xc"] < -8)                       {data[i,25] = 3}}
else if (data[i,"angle.ab"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.b"])  {data[i,24] = "abb"
if(data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 4/sin(deg2rad(data[i,"angle.b"])))                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 4/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 8/sin(deg2rad(data[i,"angle.b"])))    {data[i,25] = 2}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 8/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"])    {data[i,25] = 3}}
else if (data[i,"angle.b"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.bc"]) {data[i,24] = "bbc"
if(data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 4/sin(deg2rad(data[i,"angle.b"])) <= data[i,"yc"])                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) -8/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 4/sin(deg2rad(data[i,"angle.b"])))    {data[i,25] = 2}
else if(          (data[i,"yc"] < data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 8/sin(deg2rad(data[i,"angle.b"]))))    {data[i,25] = 3}}
else if (data[i,"angle.bc"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.c"])  {data[i,24] = "bcc"
if(data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 4/sin(deg2rad(data[i,"angle.c"])) <= data[i,"yc"])                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 8/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 4/sin(deg2rad(data[i,"angle.c"])))    {data[i,25] = 2}
else if(          (data[i,"yc"] < data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 8/sin(deg2rad(data[i,"angle.c"]))))    {data[i,25] = 3}}
else if (data[i,"angle.c"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.ca"]) {data[i,24] = "cca"
if(data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 4/sin(deg2rad(data[i,"angle.c"])))                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 4/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 8/sin(deg2rad(data[i,"angle.c"])))    {data[i,25] = 2}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 8/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"])    {data[i,25] = 3}}
else if (data[i,"angle.ca"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.a"]+360)  {data[i,24] = "caa"
if(data[i,"xc"] <= 4)                           {data[i,25] = 1}
else if(4 < data[i,"xc"] & data[i,"xc"] <= 8)  {data[i,25] = 2}
else if(8 < data[i,"xc"])                      {data[i,25] = 3}}
else if (data[i,"phi"] == data[i,"angle.a"]) {data[i,24] = "a"}
else if (data[i,"phi"] == data[i,"angle.b"]) {data[i,24] = "b"}
else if (data[i,"phi"] == data[i,"angle.c"]) {data[i,24] = "c"}
else if (data[i,"phi"] == data[i,"angle.ab"]) {data[i,24] = "ab"}
else if (data[i,"phi"] == data[i,"angle.bc"]) {data[i,24] = "bc"}
else if (data[i,"phi"] == data[i,"angle.ca"]) {data[i,24] = "ca"}
else {print ("Error")}
}}
for (i in 1:nrow(data)) {
if (data[i,"delta"] == "delta"){
if      (data[i,"angle.a"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.ab"]) {data[i,24] = "aab"
if(-4 <= data[i,"xc"])                            {data[i,25] = 1} #17 = xc ; 18 = yc
else if(-8 <= data[i,"xc"] & data[i,"xc"] < -4)  {data[i,25] = 2}
else if(data[i,"xc"] < -8)                       {data[i,25] = 3}}
else if (data[i,"angle.ab"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.b"])  {data[i,24] = "abb"
if(data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 4/sin(deg2rad(data[i,"angle.b"])))                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 4/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 8/sin(deg2rad(data[i,"angle.b"])))    {data[i,25] = 2}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 8/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"])    {data[i,25] = 3}}
else if (data[i,"angle.b"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.bc"]) {data[i,24] = "bbc"
if(data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 4/sin(deg2rad(data[i,"angle.b"])) <= data[i,"yc"])                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) -8/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 4/sin(deg2rad(data[i,"angle.b"])))    {data[i,25] = 2}
else if(          (data[i,"yc"] < data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 8/sin(deg2rad(data[i,"angle.b"]))))    {data[i,25] = 3}}
else if (data[i,"angle.bc"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.c"])  {data[i,24] = "bcc"
if(data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 4/sin(deg2rad(data[i,"angle.c"])) <= data[i,"yc"])                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 8/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 4/sin(deg2rad(data[i,"angle.c"])))    {data[i,25] = 2}
else if(          (data[i,"yc"] < data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 8/sin(deg2rad(data[i,"angle.c"]))))    {data[i,25] = 3}}
else if (data[i,"angle.c"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.ca"]) {data[i,24] = "cca"
if(data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 4/sin(deg2rad(data[i,"angle.c"])))                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 4/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 8/sin(deg2rad(data[i,"angle.c"])))    {data[i,25] = 2}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 8/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"])    {data[i,25] = 3}}
else if (data[i,"angle.ca"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.a"]+360)  {data[i,24] = "caa"
if(data[i,"xc"] <= 4)                           {data[i,25] = 1}
else if(4 < data[i,"xc"] & data[i,"xc"] <= 8)  {data[i,25] = 2}
else if(8 < data[i,"xc"])                      {data[i,25] = 3}}
else if (data[i,"phi"] == data[i,"angle.a"]) {data[i,24] = "a"}
else if (data[i,"phi"] == data[i,"angle.b"]) {data[i,24] = "b"}
else if (data[i,"phi"] == data[i,"angle.c"]) {data[i,24] = "c"}
else if (data[i,"phi"] == data[i,"angle.ab"]) {data[i,24] = "ab"}
else if (data[i,"phi"] == data[i,"angle.bc"]) {data[i,24] = "bc"}
else if (data[i,"phi"] == data[i,"angle.ca"]) {data[i,24] = "ca"}
else {print ("Error")}
}}
radar3.angle <- function (data, zone, main, angle, title) {
# for (i in c("aab","abb","bbc","bcc","cca","caa")){
#   if (angle==i){
#     tmp1 = subset(data, type==zone & d.g==main & V24=="aab" & V25==1)
#     tmp2 = subset(data, type==zone & d.g==main & V24=="aab" & V25==2)
#     tmp3 = subset(data, type==zone & d.g==main & V24=="aab" & V25==3)}
# } ### à mettre tout à la fin
if (angle=="aab"){
tmp1 = subset(data, type==zone & d.g==main & V24=="aab" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="aab" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="aab" & V25==3)}
else if (angle=="abb"){
tmp1 = subset(data, type==zone & d.g==main & V24=="abb" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="abb" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="abb" & V25==3)}
else if (angle=="bbc"){
tmp1 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==3)}
else if (angle=="bcc"){
tmp1 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==3)}
else if (angle=="cca"){
tmp1 = subset(data, type==zone & d.g==main & V24=="cca" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="cca" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="cca" & V25==3)}
else if (angle=="caa"){
tmp1 = subset(data, type==zone & d.g==main & V24=="caa" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="caa" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="caa" & V25==3)}
# print(nrow(tmp1));print(nrow(tmp2));print(nrow(tmp3))
radar.tmp1 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp1)=c(seq(90,350,10),seq(0,80,10))
radar.tmp2 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp2)=c(seq(90,350,10),seq(0,80,10))
if (nrow(tmp3) != 0) {radar.tmp3 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp3)=c(seq(90,350,10),seq(0,80,10))}
#print("Test 0")
if (angle=="aab" | angle=="caa"){
for (i in tmp1[,19]) { radar.tmp1[1,round(i/10-9)%%36+1] = radar.tmp1[1,round(i/10-9)%%36+1]+1 } # 19 = tc
for (i in tmp2[,19]) { radar.tmp2[1,round(i/10-9)%%36+1] = radar.tmp2[1,round(i/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in tmp3[,19]) { radar.tmp3[1,round(i/10-9)%%36+1] = radar.tmp3[1,round(i/10-9)%%36+1]+1 }}
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, radar.tmp3, c(30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, rep(0,36), c(30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))}}
else if (angle=="abb" | angle == "bbc"){#print("Test 1")
for (i in 1:nrow(tmp1)) { radar.tmp1[1,round((tmp1[i,19]-tmp1[i,12]+120)/10-9)%%36+1] = radar.tmp1[1,round((tmp1[i,19]-tmp1[i,12]+120)/10-9)%%36+1]+1 }
for (i in 1:nrow(tmp2)) { radar.tmp2[1,round((tmp2[i,19]-tmp2[i,12]+120)/10-9)%%36+1] = radar.tmp2[1,round((tmp2[i,19]-tmp2[i,12]+120)/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in 1:nrow(tmp3)) { radar.tmp3[1,round((tmp3[i,19]-tmp3[i,12]+120)/10-9)%%36+1] = radar.tmp3[1,round((tmp3[i,19]-tmp3[i,12]+120)/10-9)%%36+1]+1 }}
#print("Test 2")
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2 , radar.tmp3, c(0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0)) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2 , rep(0,36), c(0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0))}}
else if (angle=="bcc" | angle=="cca"){#print("Test 1")
for (i in 1:nrow(tmp1)) { radar.tmp1[1,round((tmp1[i,19]-tmp1[i,13]+240)/10-9)%%36+1] = radar.tmp1[1,round((tmp1[i,19]-tmp1[i,13]+240)/10-9)%%36+1]+1 }
for (i in 1:nrow(tmp2)) { radar.tmp2[1,round((tmp2[i,19]-tmp2[i,13]+240)/10-9)%%36+1] = radar.tmp2[1,round((tmp2[i,19]-tmp2[i,13]+240)/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in 1:nrow(tmp3)) { radar.tmp3[1,round((tmp3[i,19]-tmp3[i,13]+240)/10-9)%%36+1] = radar.tmp3[1,round((tmp3[i,19]-tmp3[i,13]+240)/10-9)%%36+1]+1 }}
#print("Test 2")
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, radar.tmp3, c(rep(0,6),30,rep(0,17),30,rep(0,11))) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, rep(0,36), c(rep(0,6),30,rep(0,17),30,rep(0,11)))}}
colnames(radar.tmp)=c(90,"","",120,"","",150,"","",180,"","",210,"","",240,"","",270,"","",300,"","",330,"","",0,"","",30,"","",60,"","")
radarchart( radar.tmp  , axistype=1 ,
pcol=c(rgb(1,0,0,0.9),rgb(0,0,1,0.9),rgb(0,1,0,0.9),rgb(0,0,0)) , pfcol=c(rgb(1,0,0,0.7), rgb(0,0,1,0.5),rgb(0,1,0,0.3),rgb(0,0,0)) , #custom polygon
cglcol="grey", cglty=1, axislabcol="grey", seg=6, caxislabels=seq(0,30,5), cglwd=0.8,calcex = 0.8, pty = 32, plty=1, plwd=c(1,1,1,3), #custom the grid
vlcex=0.8 , centerzero=TRUE, #custom labels
title = "" )
return(round(radar.tmp[3:(nrow(radar.tmp)-1),],1))
}
img <- readPNG(paste(getwd(), "/delta-sep.png", sep=""))
layout(matrix(c(1,4,1,2,4,5,2,8,5,3,8,6,3,7,6,1,7,1),nrow=3))
par(oma=c(0,0,0,0)+0.1,mar=c(0,0,0,0)+0.1)
plot.new()
dprod.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dprod.angle = rbind(dprod.angle, radar3.angle(data, "delta propre", "droit", i, ""))}
plot.new() ; lim <- par() ; rasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
plot.new()
dprog.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dprog.angle = rbind(dprog.angle, radar3.angle(data, "delta propre", "gauche", i, ""))}
plot.new() ; lim <- par() ; rasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
layout(matrix(c(1,4,1,2,4,5,2,8,5,3,8,6,3,7,6,1,7,1),nrow=3))
par(oma=c(0,0,0,0)+0.1,mar=c(0,0,0,0)+0.1)
plot.new()
dpoud.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dpoud.angle = rbind(dpoud.angle, radar3.angle(data, "delta de pouce", "droit", i, ""))}
plot.new() ; lim <- par() ; rasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
plot.new()
dpoug.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dpoug.angle = rbind(dpoug.angle, radar3.angle(data, "delta de pouce", "gauche", i, ""))}
plot.new() ; lim <- par() ; rasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
View(dprod.angle)
for (i in 1:nrow(dprod.angle){dprod.angle[i,] = cbind(sum(dprod.angle[i,4:21]), sum(dprod.angle[i,c(1:3,22:36)]))}
for (i in 1:nrow(dprod.angle)){dprod.angle[i,] = cbind(sum(dprod.angle[i,4:21]), sum(dprod.angle[i,c(1:3,22:36)]))}
View(dprod.angle)
View(dprog.angle)
for (i in 1:nrow(dprod.angle)){dprod.angle[i,] = cbind(sum(dprod.angle[i,4:21]), sum(dprod.angle[i,c(1:3,22:36)]))[1:2,]}
dprog.angleb = data.frame()
for (i in 1:nrow(dprog.angle)) {dprog.angleb[i,] = cbind(sum(dprog.angle[i,4:21]), sum(dprog.angle[i,c(1:3,22:36)]))}
View(dprog.angleb)
warnings()
dprog.angleb = as.data.frame(matrix(0,nrow=18,ncol=2))
for (i in 1:nrow(dprog.angle)) {dprog.angleb[i,] = cbind(sum(dprog.angle[i,4:21]), sum(dprog.angle[i,c(1:3,22:36)]))}
View(dprog.angleb)
install.packages("Png")
install.packages("png")
knitr::opts_chunk$set(echo = TRUE)
data = read.csv( paste(getwd(), "/data_all.csv",sep="" )) ## 48434 obs, 16 var
library(ggplot2)
library(dplyr) # mutate
library(mosaic) # rad2deg
library(spatstat) # ppp, Kest
library(gridExtra) # tableGrob
library(fmsb) # radar chart
library(png)
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data$angledif.bc < 0) {
data$angledif.bc = data$angledif.bc + 360
}
if (data$theta < 0){
data$theta = data$theta + 360
}
}
pouceD = subset(data, type=="delta de pouce" & d.g=="droit")
pouceG = subset(data, type=="delta de pouce" & d.g=="gauche")
propreD = subset(data, type=="delta propre" & d.g=="droit")
propreG = subset(data, type=="delta propre" & d.g=="gauche")
controlD = subset(data, type=="zone de controle" & d.g=="droit")
controlG = subset(data, type=="zone de controle" & d.g=="gauche")
data = read.csv( paste(getwd(), "/data_all.csv",sep="" )) ## 48434 obs, 16 var
data2=data
library(ggplot2)
library(dplyr) # mutate
library(mosaic) # rad2deg
library(spatstat) # ppp, Kest
library(gridExtra) # tableGrob
library(fmsb) # radar chart
library(png)
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data$angledif.bc < 0) {
data$angledif.bc = data$angledif.bc + 360
}
if (data$theta < 0){
data$theta = data$theta + 360
}
}
data2 = mutate( data2, xc = x.minut - x.centre ) ; data2 = mutate( data2, yc = y.minut - y.centre )
data2 = mutate( data2, angle.correction = rad2deg(angle.correction))
data2 = mutate( data2, t.minut=(t.minut+180)%%360)
data2 = mutate( data2, tc = t.minut - angle.correction)
data2 = mutate( data2, angledif.bc = ((360-angle.b)-(360-angle.c)))
data2 = mutate( data2, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data2 = mutate( data2, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data2 = mutate( data2, angle.a = angle.a -90) ; data2 = mutate( data2, angle.b = angle.b -90) ; data2 = mutate( data2, angle.c = (angle.c -90)%%360)
data2 = mutate( data2, angle.ab = (angle.a + angle.b)/2)
data2 = mutate( data2, angle.bc = (angle.b + angle.c)/2)
data2 = mutate( data2, angle.ca = (angle.c + (360 - angle.c)/2))
test=data==data2
View(test)
max(test)
min(test)
View(test)
-120+360
-120%%360
View(data)
View(test)
data2 = mutate( data2, angledif.bc = angledif.bc%%360)
data2 = mutate( data2, angledif.bc = angledif.bc%%360)
test2=data==data2
max(test2)
min(test2)
View(test2)
data2 = mutate( data2, theta = theta%%360)
test2=data==data2
max(test2)
min(test2)
View(data)
data = read.csv( paste(getwd(), "/data_all.csv",sep="" )) ## 48434 obs, 16 var
library(ggplot2)
library(dplyr) # mutate
library(mosaic) # rad2deg
library(spatstat) # ppp, Kest
library(gridExtra) # tableGrob
library(fmsb) # radar chart
library(png)
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data$angledif.bc < 0) {
data$angledif.bc = data$angledif.bc + 360
}
if (data$theta < 0){
data$theta = data$theta + 360
}
}
test2=data==data2
max(test2)
min(test2)
View(data)
data = read.csv( paste(getwd(), "/data_all.csv",sep="" )) ## 48434 obs, 16 var
library(ggplot2)
library(dplyr) # mutate
library(mosaic) # rad2deg
library(spatstat) # ppp, Kest
library(gridExtra) # tableGrob
library(fmsb) # radar chart
library(png)
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
View(data)
for (i in 1:nrow(data)) {
if (data$angledif.bc < 0) {
data$angledif.bc = data$angledif.bc + 360
}
if (data$theta < 0){
data$theta = data$theta + 360
}
}
data = read.csv( paste(getwd(), "/data_all.csv",sep="" )) ## 48434 obs, 16 var
library(ggplot2)
library(dplyr) # mutate
library(mosaic) # rad2deg
library(spatstat) # ppp, Kest
library(gridExtra) # tableGrob
library(fmsb) # radar chart
library(png)
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data[i,20] < 0) {
data[i,20] = data[i,20] + 360
}
if (data[i,16] < 0){
data[i,16] = data[i,16] + 360
}
}
test2=data==data2
max(test2)
min(test2)
View(data)
View(data2)
for(!test2){print("stop")}
for(test2!){print("stop")}
if(!test2){print("stop")}
test2=data==data2
which(z == 0)
which(test2 == 0)
test2[742751]
which(test2 == 0)%%23
which(test2 == 0)/23
data[32293,]
data2[32293,]
data2[32293,]==data[32293,]
data2[32294,]==data[32294,]
which(test2 == 0)/24
which(test2 == 0)/22
for (i in test2){if (i==F){print(i)}}
for (i in test2){if (i==T){print(i)}}
for (i in 1:nrow(test2)){if (test2[i]==T){print(i)}}
for (i in 1:nrow(test2)){if (test2[i]==F){print(i)}}
min(test2)
all(test2)
for (i in 1:nrow(test2)){if (test2[i]==F){print(i)}}
for (i in 1:nrow(test2)){if (test2[i]==T){print(i)}}
all(data==data2)
for (i in 1:nrow(data)){for (j in length(data)){if(data[i,j]!=data2[i,j]){print(paste(i,j))}}}
all(data!=data2)
which(data==data2)
which(data!=data2)
test2[742750]
test2[742751]
test2[742752]
View(test2==F)
View(test2==T)
