controlG = subset(data, type=="zone de controle" & d.g=="gauche")
ppouceD = ppp(pouceD[,17],pouceD[,18], disc(8)) ; ppouceG = ppp(pouceG[,17],pouceG[,18], disc(8))
ppropreD = ppp(propreD[,17],propreD[,18], disc(8)) ; ppropreG = ppp(propreG[,17],propreG[,18], disc(8))
pcontrolD = ppp(controlD[,17],controlD[,18], disc(8)) ; pcontrolG = ppp(controlG[,17],controlG[,18], disc(8))
layout(matrix(c(1,2,3,4,5,6),nrow=2,ncol=3))
par(oma = c(0,5,0,0) + 0.1,mar = c(0,0,0.9,0) + 0.1)
plot(ppouceD,main="Thumb delta",cex.main=1, ylab="RIGHT", border=rgb(0,1,0))
plot(ppouceG,main="", border=rgb(0,1,0))
plot(ppropreD,main="Clean delta", border=rgb(0,1,0));plot(ppropreG,main="", border=rgb(0,1,0))
plot(pcontrolD,main="Control zone", border=rgb(0,1,0));plot(pcontrolG,main="", border=rgb(0,1,0))
title("", cex.main=2, outer=TRUE, font.lab=2, ylab="Left Hand                                      Right Hand",cex.lab=1.2)
layout(matrix(c(1,2,3,4,5,6),nrow=2,ncol=3))
par(oma = c(0,5,0,0) + 0.1,mar = c(0,0,0.9,0) + 0.1)
plot(ppouceD,main="Thumb delta",cex.main=1, ylab="RIGHT", border=rgb(0,1,0))
plot(ppouceG,main="", border=rgb(1,0,0))
plot(ppropreD,main="Clean delta", border=rgb(1,0,0));plot(ppropreG,main="", border=rgb(1,0,0))
plot(pcontrolD,main="Control zone", border=rgb(1,0,0));plot(pcontrolG,main="", border=rgb(1,0,0))
pdfCSR <- function(data,name){
r<- seq(0,7.5, by=0.01) ; CSR=0 ; cluster = 0 ; dispersed = 0 ; cluster2 = 0 ; dispersed2 = 0
test = data.frame()
pdf(paste(name,".pdf",sep=""),paper="a4",width=7.8,height=11.2,title="name")
layout(matrix(c(seq(1,15,2),seq(2,16,2),seq(17,31,2),seq(18,32,2),seq(33,47,2),seq(34,48,2)),nrow=8,ncol=6))
par(oma=c(0,0,1.5,0)+0.1,mar=c(2,0,1,0)+0.1)
for (i in unique(data[,1])){
datau = data.frame()
for (j in 1:nrow(data)){
if (data[j,1] == i){datau=rbind(datau,data[j,])}}
ppp = ppp(datau[,17],datau[,18],disc(7.5))
plot(ppp,main=i,cex=0.5)
k=Kest(ppp,correction="Ripley",var.approx = TRUE,ratio= TRUE)
edge =  c(-15,15) # c(-ceiling(max(c(2*sqrt(k$rip),k$t-pi * k$r^2))),ceiling(max(c(2*sqrt(k$rip),k$t-pi * k$r^2))))
plot(k,. - pi * r^2 ~ r,ylim=edge,main="",ylab="",xlab="",legend=FALSE)
lines(matrix(c(k$r,2*sqrt(k$rip)),ncol=2),lty=2,col="red")
lines(matrix(c(k$r,-2*sqrt(k$rip)),ncol=2),lty=2,col="red")
mtext(name, outer=TRUE,  cex=1, line=0)
n=1 ; d=0 ; c=0 ; csr=0 ; d2=0 ; c2=0
for (r in k$r) {
if (k$iso[n] - pi * r^2 < -2*sqrt(k$rip[n])) {d=d+1}
else if (k$iso[n] - pi * r^2 > 2*sqrt(k$rip[n])) {c=c+1}
else csr=csr+1
if (k$iso[n] - pi * r^2 < -2*sqrt(k$rip[n]) & k$r[n]>2.5) {d2=d2+1}
else if (k$iso[n] - pi * r^2 > 2*sqrt(k$rip[n]) & k$r[n]>2.5) {c2=c2+1}
n=n+1
if (csr==length(k$r)){CSR=CSR+1}
}
#print (d) ; print (csr) ; print(c)
test=rbind(test,c(round(d/length(k$r)*100),round(csr/length(k$r)*100),round(c/length(k$r)*100)))
if (c>d){cluster=cluster + 1}
else if (c<d){dispersed=dispersed+1}
if (c2>d2){cluster2=cluster2 + 1}
else if (c2<d2){dispersed2=dispersed2+1}
}
colnames(test)=c("Dis", "CSR", "Clu")
t1=tableGrob(test[seq(1,20),],rows=NULL)
t2=tableGrob(test[seq(21,40),],rows=NULL)
t3=tableGrob(test[seq(41,60),],rows=NULL)
t4=tableGrob(test[seq(61,80),],rows=NULL)
t5=tableGrob(test[seq(81,100),],rows=NULL)
grid.arrange(t1,t2,t3,t4,t5, ncol=5)
mtext(name, outer=TRUE,  cex=1, line=-10)
mtext(paste(CSR," total CSR distributions, ",cluster," clustering and ",dispersed," dispersed",sep=""),outer = TRUE, cex=1,line=-68)
mtext(paste("Over 2.5 mm, ",cluster2," clustering and ",dispersed2," dispersed",sep=""),outer = TRUE, cex=1,line=-70)
dev.off()
#print(CSR)
}
pdfCSR <- function(data,name){
r<- seq(0,7.5, by=0.01) ; CSR=0 ; cluster = 0 ; dispersed = 0 ; cluster2 = 0 ; dispersed2 = 0
test = data.frame()
pdf(paste(name,"1.pdf",sep=""),paper="a4r",width=11.2,height=7.8,title="name")
layout(matrix(c(seq(1,9,2),seq(2,10,2),seq(11,19,2),seq(12,20,2),seq(21,29,2),seq(22,30,2),seq(31,39,2),seq(32,40,2)),nrow=5,ncol=8))
par(oma=c(0,0,1.5,0)+0.1,mar=c(2,1.5,1,0)+0.1)
for (i in unique(data[,1])){
datau = data.frame()
for (j in 1:nrow(data)){
if (data[j,1] == i){datau=rbind(datau,data[j,])}}
ppp = ppp(datau[,17],datau[,18],disc(7.5))
plot(ppp,main=i,cex=0.5)
k=Kest(ppp,correction="Ripley",var.approx = TRUE,ratio= TRUE)
edge =  c(-15,15) # c(-ceiling(max(c(2*sqrt(k$rip),k$t-pi * k$r^2))),ceiling(max(c(2*sqrt(k$rip),k$t-pi * k$r^2))))
# plot(k,. - pi * r^2 ~ r,ylim=edge,main="",ylab="",xlab="",legend=FALSE)
# lines(matrix(c(k$r,2*sqrt(k$rip)),ncol=2),lty=2,col="red")
# lines(matrix(c(k$r,-2*sqrt(k$rip)),ncol=2),lty=2,col="red")
mtext(name, outer=TRUE,  cex=1, line=0)
n=1 ; d=0 ; c=0 ; csr=0 ; d2=0 ; c2=0
for (r in k$r) {
if (k$iso[n] - pi * r^2 < -2*sqrt(k$rip[n])) {d=d+1}
else if (k$iso[n] - pi * r^2 > 2*sqrt(k$rip[n])) {c=c+1}
else csr=csr+1
if (k$iso[n] - pi * r^2 < -2*sqrt(k$rip[n]) & k$r[n]>2.5) {d2=d2+1}
else if (k$iso[n] - pi * r^2 > 2*sqrt(k$rip[n]) & k$r[n]>2.5) {c2=c2+1}
n=n+1
if (csr==length(k$r)){CSR=CSR+1}
}
test=rbind(test,c(i,round(d/length(k$r)*100,1),round(csr/length(k$r)*100,1),round(c/length(k$r)*100,1)))
if (c>d){cluster=cluster + 1}
else if (c<d){dispersed=dispersed+1}
if (c2>d2){cluster2=cluster2 + 1}
else if (c2<d2){dispersed2=dispersed2+1}
}
colnames(test)=c("ID","Dis", "CSR", "Clu")
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 0.75)),
colhead = list(fg_params=list(cex = 1.0)),
rowhead = list(fg_params=list(cex = 1.0)))
t1=tableGrob(test[seq(1,20),],rows=NULL, theme = mytheme)
t2=tableGrob(test[seq(21,40),],rows=NULL, theme = mytheme)
t3=tableGrob(test[seq(41,60),],rows=NULL, theme = mytheme)
t4=tableGrob(test[seq(61,80),],rows=NULL, theme = mytheme)
t5=tableGrob(test[seq(81,100),],rows=NULL, theme = mytheme)
grid.arrange(t1,t2,t3,t4,t5, ncol=5)
mtext(name, outer=TRUE,  cex=1, line=-0)
mtext(paste(CSR," total CSR distributions, ",cluster," clustering and ",dispersed," dispersed",sep=""),outer = TRUE, cex=1,line=-52)
mtext(paste("Over 2.5 mm, ",cluster2," clustering and ",dispersed2," dispersed",sep=""),outer = TRUE, cex=1,line=-54)
dev.off()
#print(CSR)
}
pdfCSR(pouceD,"PouceD") # 17
pdfCSR <- function(data,name){
r<- seq(0,7.5, by=0.01) ; CSR=0 ; cluster = 0 ; dispersed = 0 ; cluster2 = 0 ; dispersed2 = 0
test = data.frame()
pdf(paste(name,"1.pdf",sep=""),paper="a4r",width=11.2,height=7.8,title="name")
layout(matrix(c(seq(1,9,2),seq(2,10,2),seq(11,19,2),seq(12,20,2),seq(21,29,2),seq(22,30,2),seq(31,39,2),seq(32,40,2)),nrow=5,ncol=8))
par(oma=c(0,0,1.5,0)+0.1,mar=c(2,1.5,1,0)+0.1)
for (i in unique(data[,1])){
datau = data.frame()
for (j in 1:nrow(data)){
if (data[j,1] == i){datau=rbind(datau,data[j,])}}
ppp = ppp(datau[,17],datau[,18],disc(7.5))
plot(ppp,main=i,cex=0.5)
k=Kest(ppp,correction="Ripley",var.approx = TRUE,ratio= TRUE)
edge =  c(-15,15) # c(-ceiling(max(c(2*sqrt(k$rip),k$t-pi * k$r^2))),ceiling(max(c(2*sqrt(k$rip),k$t-pi * k$r^2))))
plot(k,. - pi * r^2 ~ r,ylim=edge,main="",ylab="",xlab="",legend=FALSE)
lines(matrix(c(k$r,2*sqrt(k$rip)),ncol=2),lty=2,col="red")
lines(matrix(c(k$r,-2*sqrt(k$rip)),ncol=2),lty=2,col="red")
mtext(name, outer=TRUE,  cex=1, line=0)
n=1 ; d=0 ; c=0 ; csr=0 ; d2=0 ; c2=0
for (r in k$r) {
if (k$iso[n] - pi * r^2 < -2*sqrt(k$rip[n])) {d=d+1}
else if (k$iso[n] - pi * r^2 > 2*sqrt(k$rip[n])) {c=c+1}
else csr=csr+1
if (k$iso[n] - pi * r^2 < -2*sqrt(k$rip[n]) & k$r[n]>2.5) {d2=d2+1}
else if (k$iso[n] - pi * r^2 > 2*sqrt(k$rip[n]) & k$r[n]>2.5) {c2=c2+1}
n=n+1
if (csr==length(k$r)){CSR=CSR+1}
}
test=rbind(test,c(i,round(d/length(k$r)*100,1),round(csr/length(k$r)*100,1),round(c/length(k$r)*100,1)))
if (c>d){cluster=cluster + 1}
else if (c<d){dispersed=dispersed+1}
if (c2>d2){cluster2=cluster2 + 1}
else if (c2<d2){dispersed2=dispersed2+1}
}
colnames(test)=c("ID","Dis", "CSR", "Clu")
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 0.75)),
colhead = list(fg_params=list(cex = 1.0)),
rowhead = list(fg_params=list(cex = 1.0)))
t1=tableGrob(test[seq(1,20),],rows=NULL, theme = mytheme)
t2=tableGrob(test[seq(21,40),],rows=NULL, theme = mytheme)
t3=tableGrob(test[seq(41,60),],rows=NULL, theme = mytheme)
t4=tableGrob(test[seq(61,80),],rows=NULL, theme = mytheme)
t5=tableGrob(test[seq(81,100),],rows=NULL, theme = mytheme)
grid.arrange(t1,t2,t3,t4,t5, ncol=5)
mtext(name, outer=TRUE,  cex=1, line=-0)
mtext(paste(CSR," total CSR distributions, ",cluster," clustering and ",dispersed," dispersed",sep=""),outer = TRUE, cex=1,line=-52)
mtext(paste("Over 2.5 mm, ",cluster2," clustering and ",dispersed2," dispersed",sep=""),outer = TRUE, cex=1,line=-54)
dev.off()
#print(CSR)
}
pdfCSR(pouceD,"PouceD") # 17
pdfCSR(controlD,"ControlD") # 69
pdfCSR(controlG,"ControlG") # 74
knitr::opts_chunk$set(echo = TRUE)
data = read.csv( paste(getwd(), "/data_all.csv",sep="" ))
library(ggplot2)
library(dplyr) # mutate
library(mosaic) # rad2deg
library(spatstat) # ppp, Kest
library(gridExtra) # tableGrob
library(fmsb) # radar chart
library(png)
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data[i,"angledif.bc"] < 0) {
data[i,"angledif.bc"] = data[i,"angledif.bc"] + 360
}
if (data[i,"theta"] < 0){
data[i,"theta"] = data[i,"theta"] + 360
}
}
img <- readPNG(paste(getwd(), "/delta-sep.png", sep=""))
layout(matrix(c(1,4,1,2,4,5,2,8,5,3,8,6,3,7,6,1,7,1),nrow=3))
par(oma=c(0,0,0,0)+0.1,mar=c(0,0,0,0)+0.1)
plot.new()
dprod.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dprod.angle = rbind(dprod.angle, radar3.angle(data, "delta propre", "droit", i, ""))}
radar3.angle <- function (data, zone, main, angle, title) {
# for (i in c("aab","abb","bbc","bcc","cca","caa")){
#   if (angle==i){
#     tmp1 = subset(data, type==zone & d.g==main & V24=="aab" & V25==1)
#     tmp2 = subset(data, type==zone & d.g==main & V24=="aab" & V25==2)
#     tmp3 = subset(data, type==zone & d.g==main & V24=="aab" & V25==3)}
# } ### à mettre tout à la fin
if (angle=="aab"){
tmp1 = subset(data, type==zone & d.g==main & V24=="aab" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="aab" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="aab" & V25==3)}
else if (angle=="abb"){
tmp1 = subset(data, type==zone & d.g==main & V24=="abb" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="abb" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="abb" & V25==3)}
else if (angle=="bbc"){
tmp1 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==3)}
else if (angle=="bcc"){
tmp1 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==3)}
else if (angle=="cca"){
tmp1 = subset(data, type==zone & d.g==main & V24=="cca" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="cca" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="cca" & V25==3)}
else if (angle=="caa"){
tmp1 = subset(data, type==zone & d.g==main & V24=="caa" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="caa" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="caa" & V25==3)}
# print(nrow(tmp1));print(nrow(tmp2));print(nrow(tmp3))
radar.tmp1 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp1)=c(seq(90,350,10),seq(0,80,10))
radar.tmp2 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp2)=c(seq(90,350,10),seq(0,80,10))
if (nrow(tmp3) != 0) {radar.tmp3 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp3)=c(seq(90,350,10),seq(0,80,10))}
#print("Test 0")
if (angle=="aab" | angle=="caa"){
for (i in tmp1[,19]) { radar.tmp1[1,round(i/10-9)%%36+1] = radar.tmp1[1,round(i/10-9)%%36+1]+1 } # 19 = tc
for (i in tmp2[,19]) { radar.tmp2[1,round(i/10-9)%%36+1] = radar.tmp2[1,round(i/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in tmp3[,19]) { radar.tmp3[1,round(i/10-9)%%36+1] = radar.tmp3[1,round(i/10-9)%%36+1]+1 }}
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, radar.tmp3, c(30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, rep(0,36), c(30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))}}
else if (angle=="abb" | angle == "bbc"){#print("Test 1")
for (i in 1:nrow(tmp1)) { radar.tmp1[1,round((tmp1[i,19]-tmp1[i,12]+120)/10-9)%%36+1] = radar.tmp1[1,round((tmp1[i,19]-tmp1[i,12]+120)/10-9)%%36+1]+1 }
for (i in 1:nrow(tmp2)) { radar.tmp2[1,round((tmp2[i,19]-tmp2[i,12]+120)/10-9)%%36+1] = radar.tmp2[1,round((tmp2[i,19]-tmp2[i,12]+120)/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in 1:nrow(tmp3)) { radar.tmp3[1,round((tmp3[i,19]-tmp3[i,12]+120)/10-9)%%36+1] = radar.tmp3[1,round((tmp3[i,19]-tmp3[i,12]+120)/10-9)%%36+1]+1 }}
#print("Test 2")
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2 , radar.tmp3, c(0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0)) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2 , rep(0,36), c(0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0))}}
else if (angle=="bcc" | angle=="cca"){#print("Test 1")
for (i in 1:nrow(tmp1)) { radar.tmp1[1,round((tmp1[i,19]-tmp1[i,13]+240)/10-9)%%36+1] = radar.tmp1[1,round((tmp1[i,19]-tmp1[i,13]+240)/10-9)%%36+1]+1 }
for (i in 1:nrow(tmp2)) { radar.tmp2[1,round((tmp2[i,19]-tmp2[i,13]+240)/10-9)%%36+1] = radar.tmp2[1,round((tmp2[i,19]-tmp2[i,13]+240)/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in 1:nrow(tmp3)) { radar.tmp3[1,round((tmp3[i,19]-tmp3[i,13]+240)/10-9)%%36+1] = radar.tmp3[1,round((tmp3[i,19]-tmp3[i,13]+240)/10-9)%%36+1]+1 }}
#print("Test 2")
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, radar.tmp3, c(rep(0,6),30,rep(0,17),30,rep(0,11))) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, rep(0,36), c(rep(0,6),30,rep(0,17),30,rep(0,11)))}}
colnames(radar.tmp)=c(90,"","",120,"","",150,"","",180,"","",210,"","",240,"","",270,"","",300,"","",330,"","",0,"","",30,"","",60,"","")
radarchart( radar.tmp  , axistype=1 ,
pcol=c(rgb(1,0,0,0.9),rgb(0,0,1,0.9),rgb(0,1,0,0.9),rgb(0,0,0)) , pfcol=c(rgb(1,0,0,0.7), rgb(0,0,1,0.5),rgb(0,1,0,0.3),rgb(0,0,0)) , #custom polygon
cglcol="grey", cglty=1, axislabcol="grey", seg=6, caxislabels=seq(0,30,5), cglwd=0.8,calcex = 0.8, pty = 32, plty=1, plwd=c(1,1,1,3), #custom the grid
vlcex=0.8 , centerzero=TRUE, #custom labels
title = "" )
return(round(radar.tmp[3:(nrow(radar.tmp)-1),],1))
}
img <- readPNG(paste(getwd(), "/delta-sep.png", sep=""))
layout(matrix(c(1,4,1,2,4,5,2,8,5,3,8,6,3,7,6,1,7,1),nrow=3))
par(oma=c(0,0,0,0)+0.1,mar=c(0,0,0,0)+0.1)
plot.new()
dprod.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dprod.angle = rbind(dprod.angle, radar3.angle(data, "delta propre", "droit", i, ""))}
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data[i,"angledif.bc"] < 0) {
data[i,"angledif.bc"] = data[i,"angledif.bc"] + 360
}
if (data[i,"theta"] < 0){
data[i,"theta"] = data[i,"theta"] + 360
}
}
data = read.csv( paste(getwd(), "/data_all.csv",sep="" )) ## 48434 obs, 16 var
library(ggplot2)
library(dplyr) # mutate
library(mosaic) # rad2deg
library(spatstat) # ppp, Kest
library(gridExtra) # tableGrob
library(fmsb) # radar chart
library(png)
data = mutate( data, xc = x.minut - x.centre ) ; data = mutate( data, yc = y.minut - y.centre )
data = mutate( data, angle.correction = rad2deg(angle.correction))
data = mutate( data, t.minut=(t.minut+180)%%360)
data = mutate( data, tc = t.minut - angle.correction)
data = mutate( data, angledif.bc = ((360-angle.b)-(360-angle.c)))
data = mutate( data, theta = tc - phi) #nouveau: est adapté à l'angle de position de la minutie
# Modification / ajout CG
data = mutate( data, phi = (phi + angle.correction - 90)%%360) #intégration de la correction pour phi
data = mutate( data, angle.a = angle.a -90) ; data = mutate( data, angle.b = angle.b -90) ; data = mutate( data, angle.c = (angle.c -90)%%360)
data = mutate( data, angle.ab = (angle.a + angle.b)/2)
data = mutate( data, angle.bc = (angle.b + angle.c)/2)
data = mutate( data, angle.ca = (angle.c + (360 - angle.c)/2))
for (i in 1:nrow(data)) {
if (data[i,"angledif.bc"] < 0) {
data[i,"angledif.bc"] = data[i,"angledif.bc"] + 360
}
if (data[i,"theta"] < 0){
data[i,"theta"] = data[i,"theta"] + 360
}
}
for (i in 1:nrow(data)) {
if (data[i,"delta"] == "delta"){
if      (data[i,"angle.a"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.ab"]) {data[i,24] = "aab"
if(-4 <= data[i,"xc"])                            {data[i,25] = 1} #17 = xc ; 18 = yc
else if(-8 <= data[i,"xc"] & data[i,"xc"] < -4)  {data[i,25] = 2}
else if(data[i,"xc"] < -8)                       {data[i,25] = 3}}
else if (data[i,"angle.ab"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.b"])  {data[i,24] = "abb"
if(data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 4/sin(deg2rad(data[i,"angle.b"])))                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 4/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 8/sin(deg2rad(data[i,"angle.b"])))    {data[i,25] = 2}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 8/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"])    {data[i,25] = 3}}
else if (data[i,"angle.b"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.bc"]) {data[i,24] = "bbc"
if(data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 4/sin(deg2rad(data[i,"angle.b"])) <= data[i,"yc"])                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) -8/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 4/sin(deg2rad(data[i,"angle.b"])))    {data[i,25] = 2}
else if(          (data[i,"yc"] < data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 8/sin(deg2rad(data[i,"angle.b"]))))    {data[i,25] = 3}}
else if (data[i,"angle.bc"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.c"])  {data[i,24] = "bcc"
if(data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 4/sin(deg2rad(data[i,"angle.c"])) <= data[i,"yc"])                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 8/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 4/sin(deg2rad(data[i,"angle.c"])))    {data[i,25] = 2}
else if(          (data[i,"yc"] < data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 8/sin(deg2rad(data[i,"angle.c"]))))    {data[i,25] = 3}}
else if (data[i,"angle.c"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.ca"]) {data[i,24] = "cca"
if(data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 4/sin(deg2rad(data[i,"angle.c"])))                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 4/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 8/sin(deg2rad(data[i,"angle.c"])))    {data[i,25] = 2}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 8/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"])    {data[i,25] = 3}}
else if (data[i,"angle.ca"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.a"]+360)  {data[i,24] = "caa"
if(data[i,"xc"] <= 4)                           {data[i,25] = 1}
else if(4 < data[i,"xc"] & data[i,"xc"] <= 8)  {data[i,25] = 2}
else if(8 < data[i,"xc"])                      {data[i,25] = 3}}
else if (data[i,"phi"] == data[i,"angle.a"]) {data[i,24] = "a"}
else if (data[i,"phi"] == data[i,"angle.b"]) {data[i,24] = "b"}
else if (data[i,"phi"] == data[i,"angle.c"]) {data[i,24] = "c"}
else if (data[i,"phi"] == data[i,"angle.ab"]) {data[i,24] = "ab"}
else if (data[i,"phi"] == data[i,"angle.bc"]) {data[i,24] = "bc"}
else if (data[i,"phi"] == data[i,"angle.ca"]) {data[i,24] = "ca"}
else {print ("Error")}
}}
for (i in 1:nrow(data)) {
if (data[i,"delta"] == "delta"){
if      (data[i,"angle.a"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.ab"]) {data[i,24] = "aab"
if(-4 <= data[i,"xc"])                            {data[i,25] = 1} #17 = xc ; 18 = yc
else if(-8 <= data[i,"xc"] & data[i,"xc"] < -4)  {data[i,25] = 2}
else if(data[i,"xc"] < -8)                       {data[i,25] = 3}}
else if (data[i,"angle.ab"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.b"])  {data[i,24] = "abb"
if(data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 4/sin(deg2rad(data[i,"angle.b"])))                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 4/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 8/sin(deg2rad(data[i,"angle.b"])))    {data[i,25] = 2}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) + 8/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"])    {data[i,25] = 3}}
else if (data[i,"angle.b"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.bc"]) {data[i,24] = "bbc"
if(data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 4/sin(deg2rad(data[i,"angle.b"])) <= data[i,"yc"])                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) -8/sin(deg2rad(data[i,"angle.b"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 4/sin(deg2rad(data[i,"angle.b"])))    {data[i,25] = 2}
else if(          (data[i,"yc"] < data[i,"xc"]*tan(deg2rad(data[i,"angle.b"]+90)) - 8/sin(deg2rad(data[i,"angle.b"]))))    {data[i,25] = 3}}
else if (data[i,"angle.bc"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.c"])  {data[i,24] = "bcc"
if(data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 4/sin(deg2rad(data[i,"angle.c"])) <= data[i,"yc"])                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 8/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 4/sin(deg2rad(data[i,"angle.c"])))    {data[i,25] = 2}
else if(          (data[i,"yc"] < data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) + 8/sin(deg2rad(data[i,"angle.c"]))))    {data[i,25] = 3}}
else if (data[i,"angle.c"]  < data[i,"phi"] & data[i,"phi"] < data[i,"angle.ca"]) {data[i,24] = "cca"
if(data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 4/sin(deg2rad(data[i,"angle.c"])))                    {data[i,25] = 1}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 4/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"] &
data[i,"yc"] <= data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 8/sin(deg2rad(data[i,"angle.c"])))    {data[i,25] = 2}
else if(          (data[i,"xc"]*tan(deg2rad(data[i,"angle.c"]+90)) - 8/sin(deg2rad(data[i,"angle.c"]))) < data[i,"yc"])    {data[i,25] = 3}}
else if (data[i,"angle.ca"] < data[i,"phi"] & data[i,"phi"] < data[i,"angle.a"]+360)  {data[i,24] = "caa"
if(data[i,"xc"] <= 4)                           {data[i,25] = 1}
else if(4 < data[i,"xc"] & data[i,"xc"] <= 8)  {data[i,25] = 2}
else if(8 < data[i,"xc"])                      {data[i,25] = 3}}
else if (data[i,"phi"] == data[i,"angle.a"]) {data[i,24] = "a"}
else if (data[i,"phi"] == data[i,"angle.b"]) {data[i,24] = "b"}
else if (data[i,"phi"] == data[i,"angle.c"]) {data[i,24] = "c"}
else if (data[i,"phi"] == data[i,"angle.ab"]) {data[i,24] = "ab"}
else if (data[i,"phi"] == data[i,"angle.bc"]) {data[i,24] = "bc"}
else if (data[i,"phi"] == data[i,"angle.ca"]) {data[i,24] = "ca"}
else {print ("Error")}
}}
radar3.angle <- function (data, zone, main, angle, title) {
# for (i in c("aab","abb","bbc","bcc","cca","caa")){
#   if (angle==i){
#     tmp1 = subset(data, type==zone & d.g==main & V24=="aab" & V25==1)
#     tmp2 = subset(data, type==zone & d.g==main & V24=="aab" & V25==2)
#     tmp3 = subset(data, type==zone & d.g==main & V24=="aab" & V25==3)}
# } ### à mettre tout à la fin
if (angle=="aab"){
tmp1 = subset(data, type==zone & d.g==main & V24=="aab" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="aab" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="aab" & V25==3)}
else if (angle=="abb"){
tmp1 = subset(data, type==zone & d.g==main & V24=="abb" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="abb" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="abb" & V25==3)}
else if (angle=="bbc"){
tmp1 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="bbc" & V25==3)}
else if (angle=="bcc"){
tmp1 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="bcc" & V25==3)}
else if (angle=="cca"){
tmp1 = subset(data, type==zone & d.g==main & V24=="cca" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="cca" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="cca" & V25==3)}
else if (angle=="caa"){
tmp1 = subset(data, type==zone & d.g==main & V24=="caa" & V25==1)
tmp2 = subset(data, type==zone & d.g==main & V24=="caa" & V25==2)
tmp3 = subset(data, type==zone & d.g==main & V24=="caa" & V25==3)}
# print(nrow(tmp1));print(nrow(tmp2));print(nrow(tmp3))
radar.tmp1 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp1)=c(seq(90,350,10),seq(0,80,10))
radar.tmp2 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp2)=c(seq(90,350,10),seq(0,80,10))
if (nrow(tmp3) != 0) {radar.tmp3 = as.data.frame(matrix(0,ncol=36)) ;colnames(radar.tmp3)=c(seq(90,350,10),seq(0,80,10))}
#print("Test 0")
if (angle=="aab" | angle=="caa"){
for (i in tmp1[,19]) { radar.tmp1[1,round(i/10-9)%%36+1] = radar.tmp1[1,round(i/10-9)%%36+1]+1 } # 19 = tc
for (i in tmp2[,19]) { radar.tmp2[1,round(i/10-9)%%36+1] = radar.tmp2[1,round(i/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in tmp3[,19]) { radar.tmp3[1,round(i/10-9)%%36+1] = radar.tmp3[1,round(i/10-9)%%36+1]+1 }}
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, radar.tmp3, c(30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, rep(0,36), c(30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0))}}
else if (angle=="abb" | angle == "bbc"){#print("Test 1")
for (i in 1:nrow(tmp1)) { radar.tmp1[1,round((tmp1[i,19]-tmp1[i,12]+120)/10-9)%%36+1] = radar.tmp1[1,round((tmp1[i,19]-tmp1[i,12]+120)/10-9)%%36+1]+1 }
for (i in 1:nrow(tmp2)) { radar.tmp2[1,round((tmp2[i,19]-tmp2[i,12]+120)/10-9)%%36+1] = radar.tmp2[1,round((tmp2[i,19]-tmp2[i,12]+120)/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in 1:nrow(tmp3)) { radar.tmp3[1,round((tmp3[i,19]-tmp3[i,12]+120)/10-9)%%36+1] = radar.tmp3[1,round((tmp3[i,19]-tmp3[i,12]+120)/10-9)%%36+1]+1 }}
#print("Test 2")
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2 , radar.tmp3, c(0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0)) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2 , rep(0,36), c(0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0))}}
else if (angle=="bcc" | angle=="cca"){#print("Test 1")
for (i in 1:nrow(tmp1)) { radar.tmp1[1,round((tmp1[i,19]-tmp1[i,13]+240)/10-9)%%36+1] = radar.tmp1[1,round((tmp1[i,19]-tmp1[i,13]+240)/10-9)%%36+1]+1 }
for (i in 1:nrow(tmp2)) { radar.tmp2[1,round((tmp2[i,19]-tmp2[i,13]+240)/10-9)%%36+1] = radar.tmp2[1,round((tmp2[i,19]-tmp2[i,13]+240)/10-9)%%36+1]+1 }
if (nrow(tmp3) != 0) {for (i in 1:nrow(tmp3)) { radar.tmp3[1,round((tmp3[i,19]-tmp3[i,13]+240)/10-9)%%36+1] = radar.tmp3[1,round((tmp3[i,19]-tmp3[i,13]+240)/10-9)%%36+1]+1 }}
#print("Test 2")
radar.tmp1 = radar.tmp1 / sum(radar.tmp1)*100 ; radar.tmp2 = radar.tmp2 / sum(radar.tmp2)*100
if (nrow(tmp3) != 0) {radar.tmp3 = radar.tmp3 / sum(radar.tmp3)*100
radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, radar.tmp3, c(rep(0,6),30,rep(0,17),30,rep(0,11))) }
else {radar.tmp=rbind(rep(30,36) ,rep(0,36) , radar.tmp1, radar.tmp2, rep(0,36), c(rep(0,6),30,rep(0,17),30,rep(0,11)))}}
colnames(radar.tmp)=c(90,"","",120,"","",150,"","",180,"","",210,"","",240,"","",270,"","",300,"","",330,"","",0,"","",30,"","",60,"","")
radarchart( radar.tmp  , axistype=1 ,
pcol=c(rgb(1,0,0,0.9),rgb(0,0,1,0.9),rgb(0,1,0,0.9),rgb(0,0,0)) , pfcol=c(rgb(1,0,0,0.7), rgb(0,0,1,0.5),rgb(0,1,0,0.3),rgb(0,0,0)) , #custom polygon
cglcol="grey", cglty=1, axislabcol="grey", seg=6, caxislabels=seq(0,30,5), cglwd=0.8,calcex = 0.8, pty = 32, plty=1, plwd=c(1,1,1,3), #custom the grid
vlcex=0.8 , centerzero=TRUE, #custom labels
title = "" )
return(round(radar.tmp[3:(nrow(radar.tmp)-1),],1))
}
img <- readPNG(paste(getwd(), "/delta-sep.png", sep=""))
layout(matrix(c(1,4,1,2,4,5,2,8,5,3,8,6,3,7,6,1,7,1),nrow=3))
par(oma=c(0,0,0,0)+0.1,mar=c(0,0,0,0)+0.1)
plot.new()
dprod.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dprod.angle = rbind(dprod.angle, radar3.angle(data, "delta propre", "droit", i, ""))}
plot.new() ; lim <- par() ; rasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
plot.new()
dprog.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dprog.angle = rbind(dprog.angle, radar3.angle(data, "delta propre", "gauche", i, ""))}
plot.new() ; lim <- par() ; rasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
layout(matrix(c(1,4,1,2,4,5,2,8,5,3,8,6,3,7,6,1,7,1),nrow=3))
par(oma=c(0,0,0,0)+0.1,mar=c(0,0,0,0)+0.1)
plot.new()
dpoud.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dpoud.angle = rbind(dpoud.angle, radar3.angle(data, "delta de pouce", "droit", i, ""))}
plot.new() ; lim <- par() ; rasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
plot.new()
dpoug.angle=data.frame()
for (i in c("aab", "caa", "abb", "bbc", "bcc", "cca")){dpoug.angle = rbind(dpoug.angle, radar3.angle(data, "delta de pouce", "gauche", i, ""))}
plot.new() ; lim <- par() ; rasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])
View(dprod.angle)
for (i in 1:nrow(dprod.angle){dprod.angle[i,] = cbind(sum(dprod.angle[i,4:21]), sum(dprod.angle[i,c(1:3,22:36)]))}
for (i in 1:nrow(dprod.angle)){dprod.angle[i,] = cbind(sum(dprod.angle[i,4:21]), sum(dprod.angle[i,c(1:3,22:36)]))}
View(dprod.angle)
View(dprog.angle)
for (i in 1:nrow(dprod.angle)){dprod.angle[i,] = cbind(sum(dprod.angle[i,4:21]), sum(dprod.angle[i,c(1:3,22:36)]))[1:2,]}
dprog.angleb = data.frame()
for (i in 1:nrow(dprog.angle)) {dprog.angleb[i,] = cbind(sum(dprog.angle[i,4:21]), sum(dprog.angle[i,c(1:3,22:36)]))}
View(dprog.angleb)
warnings()
dprog.angleb = as.data.frame(matrix(0,nrow=18,ncol=2))
for (i in 1:nrow(dprog.angle)) {dprog.angleb[i,] = cbind(sum(dprog.angle[i,4:21]), sum(dprog.angle[i,c(1:3,22:36)]))}
View(dprog.angleb)
install.packages("Png")
install.packages("png")
